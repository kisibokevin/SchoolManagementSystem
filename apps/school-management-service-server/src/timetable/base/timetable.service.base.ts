/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Timetable as PrismaTimetable } from "@prisma/client";

export class TimetableServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TimetableCountArgs, "select">
  ): Promise<number> {
    return this.prisma.timetable.count(args);
  }

  async timetables<T extends Prisma.TimetableFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimetableFindManyArgs>
  ): Promise<PrismaTimetable[]> {
    return this.prisma.timetable.findMany<Prisma.TimetableFindManyArgs>(args);
  }
  async timetable<T extends Prisma.TimetableFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimetableFindUniqueArgs>
  ): Promise<PrismaTimetable | null> {
    return this.prisma.timetable.findUnique(args);
  }
  async createTimetable<T extends Prisma.TimetableCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimetableCreateArgs>
  ): Promise<PrismaTimetable> {
    return this.prisma.timetable.create<T>(args);
  }
  async updateTimetable<T extends Prisma.TimetableUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimetableUpdateArgs>
  ): Promise<PrismaTimetable> {
    return this.prisma.timetable.update<T>(args);
  }
  async deleteTimetable<T extends Prisma.TimetableDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimetableDeleteArgs>
  ): Promise<PrismaTimetable> {
    return this.prisma.timetable.delete(args);
  }
}
