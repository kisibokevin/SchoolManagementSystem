/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Homework } from "./Homework";
import { HomeworkCountArgs } from "./HomeworkCountArgs";
import { HomeworkFindManyArgs } from "./HomeworkFindManyArgs";
import { HomeworkFindUniqueArgs } from "./HomeworkFindUniqueArgs";
import { DeleteHomeworkArgs } from "./DeleteHomeworkArgs";
import { HomeworkService } from "../homework.service";
@graphql.Resolver(() => Homework)
export class HomeworkResolverBase {
  constructor(protected readonly service: HomeworkService) {}

  async _homeworkItemsMeta(
    @graphql.Args() args: HomeworkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Homework])
  async homeworkItems(
    @graphql.Args() args: HomeworkFindManyArgs
  ): Promise<Homework[]> {
    return this.service.homeworkItems(args);
  }

  @graphql.Query(() => Homework, { nullable: true })
  async homework(
    @graphql.Args() args: HomeworkFindUniqueArgs
  ): Promise<Homework | null> {
    const result = await this.service.homework(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Homework)
  async deleteHomework(
    @graphql.Args() args: DeleteHomeworkArgs
  ): Promise<Homework | null> {
    try {
      return await this.service.deleteHomework(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
