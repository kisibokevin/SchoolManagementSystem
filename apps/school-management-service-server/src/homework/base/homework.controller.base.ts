/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HomeworkService } from "../homework.service";
import { HomeworkCreateInput } from "./HomeworkCreateInput";
import { Homework } from "./Homework";
import { HomeworkFindManyArgs } from "./HomeworkFindManyArgs";
import { HomeworkWhereUniqueInput } from "./HomeworkWhereUniqueInput";
import { HomeworkUpdateInput } from "./HomeworkUpdateInput";

export class HomeworkControllerBase {
  constructor(protected readonly service: HomeworkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Homework })
  async createHomework(
    @common.Body() data: HomeworkCreateInput
  ): Promise<Homework> {
    return await this.service.createHomework({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Homework] })
  @ApiNestedQuery(HomeworkFindManyArgs)
  async homeworkItems(@common.Req() request: Request): Promise<Homework[]> {
    const args = plainToClass(HomeworkFindManyArgs, request.query);
    return this.service.homeworkItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Homework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async homework(
    @common.Param() params: HomeworkWhereUniqueInput
  ): Promise<Homework | null> {
    const result = await this.service.homework({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Homework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHomework(
    @common.Param() params: HomeworkWhereUniqueInput,
    @common.Body() data: HomeworkUpdateInput
  ): Promise<Homework | null> {
    try {
      return await this.service.updateHomework({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Homework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHomework(
    @common.Param() params: HomeworkWhereUniqueInput
  ): Promise<Homework | null> {
    try {
      return await this.service.deleteHomework({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
