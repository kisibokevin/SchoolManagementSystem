/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ReportCard as PrismaReportCard } from "@prisma/client";

export class ReportCardServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ReportCardCountArgs, "select">
  ): Promise<number> {
    return this.prisma.reportCard.count(args);
  }

  async reportCards<T extends Prisma.ReportCardFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportCardFindManyArgs>
  ): Promise<PrismaReportCard[]> {
    return this.prisma.reportCard.findMany<Prisma.ReportCardFindManyArgs>(args);
  }
  async reportCard<T extends Prisma.ReportCardFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportCardFindUniqueArgs>
  ): Promise<PrismaReportCard | null> {
    return this.prisma.reportCard.findUnique(args);
  }
  async createReportCard<T extends Prisma.ReportCardCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportCardCreateArgs>
  ): Promise<PrismaReportCard> {
    return this.prisma.reportCard.create<T>(args);
  }
  async updateReportCard<T extends Prisma.ReportCardUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportCardUpdateArgs>
  ): Promise<PrismaReportCard> {
    return this.prisma.reportCard.update<T>(args);
  }
  async deleteReportCard<T extends Prisma.ReportCardDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportCardDeleteArgs>
  ): Promise<PrismaReportCard> {
    return this.prisma.reportCard.delete(args);
  }
}
