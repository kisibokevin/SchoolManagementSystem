/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ReportCard } from "./ReportCard";
import { ReportCardCountArgs } from "./ReportCardCountArgs";
import { ReportCardFindManyArgs } from "./ReportCardFindManyArgs";
import { ReportCardFindUniqueArgs } from "./ReportCardFindUniqueArgs";
import { DeleteReportCardArgs } from "./DeleteReportCardArgs";
import { ReportCardService } from "../reportCard.service";
@graphql.Resolver(() => ReportCard)
export class ReportCardResolverBase {
  constructor(protected readonly service: ReportCardService) {}

  async _reportCardsMeta(
    @graphql.Args() args: ReportCardCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReportCard])
  async reportCards(
    @graphql.Args() args: ReportCardFindManyArgs
  ): Promise<ReportCard[]> {
    return this.service.reportCards(args);
  }

  @graphql.Query(() => ReportCard, { nullable: true })
  async reportCard(
    @graphql.Args() args: ReportCardFindUniqueArgs
  ): Promise<ReportCard | null> {
    const result = await this.service.reportCard(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReportCard)
  async deleteReportCard(
    @graphql.Args() args: DeleteReportCardArgs
  ): Promise<ReportCard | null> {
    try {
      return await this.service.deleteReportCard(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
