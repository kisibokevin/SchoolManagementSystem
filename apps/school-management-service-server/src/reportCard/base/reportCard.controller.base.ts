/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReportCardService } from "../reportCard.service";
import { ReportCardCreateInput } from "./ReportCardCreateInput";
import { ReportCard } from "./ReportCard";
import { ReportCardFindManyArgs } from "./ReportCardFindManyArgs";
import { ReportCardWhereUniqueInput } from "./ReportCardWhereUniqueInput";
import { ReportCardUpdateInput } from "./ReportCardUpdateInput";

export class ReportCardControllerBase {
  constructor(protected readonly service: ReportCardService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReportCard })
  async createReportCard(
    @common.Body() data: ReportCardCreateInput
  ): Promise<ReportCard> {
    return await this.service.createReportCard({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReportCard] })
  @ApiNestedQuery(ReportCardFindManyArgs)
  async reportCards(@common.Req() request: Request): Promise<ReportCard[]> {
    const args = plainToClass(ReportCardFindManyArgs, request.query);
    return this.service.reportCards({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReportCard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reportCard(
    @common.Param() params: ReportCardWhereUniqueInput
  ): Promise<ReportCard | null> {
    const result = await this.service.reportCard({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReportCard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReportCard(
    @common.Param() params: ReportCardWhereUniqueInput,
    @common.Body() data: ReportCardUpdateInput
  ): Promise<ReportCard | null> {
    try {
      return await this.service.updateReportCard({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReportCard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReportCard(
    @common.Param() params: ReportCardWhereUniqueInput
  ): Promise<ReportCard | null> {
    try {
      return await this.service.deleteReportCard({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
