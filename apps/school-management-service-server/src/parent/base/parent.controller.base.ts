/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ParentService } from "../parent.service";
import { ParentCreateInput } from "./ParentCreateInput";
import { Parent } from "./Parent";
import { ParentFindManyArgs } from "./ParentFindManyArgs";
import { ParentWhereUniqueInput } from "./ParentWhereUniqueInput";
import { ParentUpdateInput } from "./ParentUpdateInput";

export class ParentControllerBase {
  constructor(protected readonly service: ParentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Parent })
  async createParent(@common.Body() data: ParentCreateInput): Promise<Parent> {
    return await this.service.createParent({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Parent] })
  @ApiNestedQuery(ParentFindManyArgs)
  async parents(@common.Req() request: Request): Promise<Parent[]> {
    const args = plainToClass(ParentFindManyArgs, request.query);
    return this.service.parents({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Parent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async parent(
    @common.Param() params: ParentWhereUniqueInput
  ): Promise<Parent | null> {
    const result = await this.service.parent({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Parent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateParent(
    @common.Param() params: ParentWhereUniqueInput,
    @common.Body() data: ParentUpdateInput
  ): Promise<Parent | null> {
    try {
      return await this.service.updateParent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Parent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteParent(
    @common.Param() params: ParentWhereUniqueInput
  ): Promise<Parent | null> {
    try {
      return await this.service.deleteParent({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
