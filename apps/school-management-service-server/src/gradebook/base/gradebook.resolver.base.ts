/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Gradebook } from "./Gradebook";
import { GradebookCountArgs } from "./GradebookCountArgs";
import { GradebookFindManyArgs } from "./GradebookFindManyArgs";
import { GradebookFindUniqueArgs } from "./GradebookFindUniqueArgs";
import { DeleteGradebookArgs } from "./DeleteGradebookArgs";
import { GradebookService } from "../gradebook.service";
@graphql.Resolver(() => Gradebook)
export class GradebookResolverBase {
  constructor(protected readonly service: GradebookService) {}

  async _gradebooksMeta(
    @graphql.Args() args: GradebookCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Gradebook])
  async gradebooks(
    @graphql.Args() args: GradebookFindManyArgs
  ): Promise<Gradebook[]> {
    return this.service.gradebooks(args);
  }

  @graphql.Query(() => Gradebook, { nullable: true })
  async gradebook(
    @graphql.Args() args: GradebookFindUniqueArgs
  ): Promise<Gradebook | null> {
    const result = await this.service.gradebook(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Gradebook)
  async deleteGradebook(
    @graphql.Args() args: DeleteGradebookArgs
  ): Promise<Gradebook | null> {
    try {
      return await this.service.deleteGradebook(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
