/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssessmentService } from "../assessment.service";
import { AssessmentCreateInput } from "./AssessmentCreateInput";
import { Assessment } from "./Assessment";
import { AssessmentFindManyArgs } from "./AssessmentFindManyArgs";
import { AssessmentWhereUniqueInput } from "./AssessmentWhereUniqueInput";
import { AssessmentUpdateInput } from "./AssessmentUpdateInput";

export class AssessmentControllerBase {
  constructor(protected readonly service: AssessmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Assessment })
  async createAssessment(
    @common.Body() data: AssessmentCreateInput
  ): Promise<Assessment> {
    return await this.service.createAssessment({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Assessment] })
  @ApiNestedQuery(AssessmentFindManyArgs)
  async assessments(@common.Req() request: Request): Promise<Assessment[]> {
    const args = plainToClass(AssessmentFindManyArgs, request.query);
    return this.service.assessments({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Assessment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assessment(
    @common.Param() params: AssessmentWhereUniqueInput
  ): Promise<Assessment | null> {
    const result = await this.service.assessment({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Assessment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssessment(
    @common.Param() params: AssessmentWhereUniqueInput,
    @common.Body() data: AssessmentUpdateInput
  ): Promise<Assessment | null> {
    try {
      return await this.service.updateAssessment({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Assessment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssessment(
    @common.Param() params: AssessmentWhereUniqueInput
  ): Promise<Assessment | null> {
    try {
      return await this.service.deleteAssessment({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
