/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Assessment as PrismaAssessment } from "@prisma/client";

export class AssessmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AssessmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.assessment.count(args);
  }

  async assessments<T extends Prisma.AssessmentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AssessmentFindManyArgs>
  ): Promise<PrismaAssessment[]> {
    return this.prisma.assessment.findMany<Prisma.AssessmentFindManyArgs>(args);
  }
  async assessment<T extends Prisma.AssessmentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AssessmentFindUniqueArgs>
  ): Promise<PrismaAssessment | null> {
    return this.prisma.assessment.findUnique(args);
  }
  async createAssessment<T extends Prisma.AssessmentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AssessmentCreateArgs>
  ): Promise<PrismaAssessment> {
    return this.prisma.assessment.create<T>(args);
  }
  async updateAssessment<T extends Prisma.AssessmentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AssessmentUpdateArgs>
  ): Promise<PrismaAssessment> {
    return this.prisma.assessment.update<T>(args);
  }
  async deleteAssessment<T extends Prisma.AssessmentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AssessmentDeleteArgs>
  ): Promise<PrismaAssessment> {
    return this.prisma.assessment.delete(args);
  }
}
