/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Fee as PrismaFee } from "@prisma/client";

export class FeeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FeeCountArgs, "select">): Promise<number> {
    return this.prisma.fee.count(args);
  }

  async fees<T extends Prisma.FeeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeeFindManyArgs>
  ): Promise<PrismaFee[]> {
    return this.prisma.fee.findMany<Prisma.FeeFindManyArgs>(args);
  }
  async fee<T extends Prisma.FeeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeeFindUniqueArgs>
  ): Promise<PrismaFee | null> {
    return this.prisma.fee.findUnique(args);
  }
  async createFee<T extends Prisma.FeeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeeCreateArgs>
  ): Promise<PrismaFee> {
    return this.prisma.fee.create<T>(args);
  }
  async updateFee<T extends Prisma.FeeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeeUpdateArgs>
  ): Promise<PrismaFee> {
    return this.prisma.fee.update<T>(args);
  }
  async deleteFee<T extends Prisma.FeeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeeDeleteArgs>
  ): Promise<PrismaFee> {
    return this.prisma.fee.delete(args);
  }
}
